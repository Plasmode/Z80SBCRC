; 10/31/18 Z80SBCRC ldrbios, start from ldrbios of Z280RC 
; originally from LDRBIOS of cpm3on2 downloaded from cpm.z80.de
; part of the code is from Alan Cox which is based on MPM ldrbios from Will Sowerbutts

.z80 ; prefer z80 mnemonics

; Z80SBCRC CPLD UART

RxData  	equ 0xF9        	; CPLD UART receive register
TxData  	equ 0xF9        	; CPLD UART transmit register
RxStat  	equ 0xF8        	; CPLD UART transmitter status/control register
TxStat  	equ 0xF8        	; CPLD UART receiver status/control register
; CF interface registers
CFdata   	equ 0xC0    	;CF data register
CFerr    	equ 0xC1    	;CF error reg
CFsectcnt 	equ 0xC2    	;CF sector count reg
CF07     	equ 0xC3   	;CF LA0-7
CF815    	equ 0xC4      	;CF LA8-15
CF1623   	equ 0xC5       	;CF LA16-23
CF2427   	equ 0xC6       	;CF LA24-27
CFstat   	equ 0xC7       	;CF status/command reg
MMUctrl		equ 0xf0		; MMU master control reg
MMUptr		equ 0xf1		; MMU page descriptor reg pointer
MMUsel		equ 0xf5		; MMU descriptor select port
MMUmove		equ 0xf4		; MMU block move port
MMUinv		equ 0xf2		; MMU invalidation port

	CSEG
; jump vector table used by CP/M
            jp boot         ; cold start
wboote:     jp bad1          ; warm start
            jp bad2	    ; console status
            jp bad2          ; console character in
            jp conout       ; console character out
            jp bad9          ; list character out
            jp bad9          ; punch character out
            jp bad9          ; reader character out
            jp home         ; move disk head to home position
            jp seldsk       ; select disk
            jp seltrk       ; set track number
            jp setsec       ; set sector number
            jp setdma       ; set DMA address
            jp read         ; read disk
            jp bad3          ; write disk
            jp bad9          ; return list status
            jp sectran      ; sector translate
            jp bad2	    ; console output ready
            jp bad4	    ; aux input is ready
            jp bad4	    ; aux output is ready
            jp bad4	    ; device table
            jp bad4	    ; device init
            jp bad4 	    ; drive table
            jp bad5 	    ; multi block I/O
            jp bad9	    ; flush data to disc
            jp move	    ; block move (including banking)
            jp bad9	    ; get current data and time into SCB
            jp bad9	    ; select memory bank. Special: preserve regs
            jp bad9	    ; set the bank for the next read/write sector
            jp bad9	    ; set up for cross bank move
            jp bad9	    ; extended BIOS
            jp 0	    ; reserved
            jp 0	    ; reserved


; CP/M 3 style disk parameter header
;  See section 3.3.2 of system guide
dpbase0:
            ; disk 0 (A)
            dw 0            ; sector translation table (0 = no translation)
	    db 0,0,0,0,0,0,0,0,0  ; BDOS scratch area
	    db 0            ; Media flag
            dw dpblk0        ; DPB (disk parameter block)
            dw 0            ; CSV (unique scratch pad used to check for changed disks)
            dw alv00        ; ALV (unique scratch pad for allocation information)
	    dw dirbcb0	    ; Directory buffer control block
	    dw dtabcb       ; DTAB CB
            dw 0xFFFF       ; HASH, 0xFFFF disable hashing
            db 0            ; HASH bank
            ; end of disk 0


ndisks      equ 1           ; number of disks we defined
;  see section 3.3.4 of system guide for buffer control block
dirbcb0:    db 0xFF	    ; Disk Drive, set to 0xFF--do not use GENCPM
            ds 3	    ; Record
            ds 1            ; Write Buffer Flag
            db 0            ; BDOS scratch byte
            ds 2            ; Track
            ds 2            ; Sector
            dw dirb0        ; Directory buffer
            db 0	    ; Bank
            dw 0	    ; Link, 0 for last BCB in the linked list

dtabcb:     db 0xFF	    ; Disk Drive, set to 0xFF--do not use GENCPM
            ds 3	    ; Record
            ds 1            ; Write Buffer Flag
            db 0            ; BDOS scratch byte
            ds 2            ; Track
            ds 2            ; Sector
            dw data0        ; Data buffer
            db 0	    ; Bank
            dw 0	    ; Link, 0 for last BCB in the linked list

; DPB like Tiny68K, BLS 4096, 1024 sector, 64 sectors per block, 62 tracks
;  track offset of 1
;  see section 3.3.3 of system guide
dpblk0:
	dw 1024		;sectors per track (SPT)

	db 5		; block shift factor (BSH)
	db 31		;block mask (BLM)
	db 1		;null mask (EXM)
	dw 1983		;disk size-1 (DSM)
	dw 511		;directory max (DRM)
	db 0xf0		;alloc 0 (AL0)
	db 0		;alloc 1 (AL1)
	dw 0		;check size (CKL)
	dw 1		; track offset (OFF)
	db 2	    	; PSH - 128 byte sectors
	db 3	    	; PHM - 128 byte sectors

; bios functions follow

boot:
; initialize CF to 8-bit mode
	call readbsy	;;8 wait until busy flag is cleared
	ld a,0e0h	;;8 set up LBA mode
	out (CF2427),a	;;8
	ld a,1		;;8 set feature to 8-bit interface
	out (CFerr),a	;;8
	ld a,0efh	;;8 set feature command
	out (CFstat),a	;;8
	call readbsy	;;8 wait until busy flag is cleared

	ld hl, bootstr
        call strout
	ret
; Must return to loader when finished.
readbsy:
; spin on CF status busy bit
	in a,(CFstat)	; read CF status 
	and 80h		; mask off all except busy bit
	jp nz,readbsy
	ret

; several different failed states, print a number followed with 'FAILED!!'	    
bad1:	ld c,'1'
	jp bad
bad2:	ld c,'2'
	jp bad
bad3:	ld c,'3'
	jp bad
bad4:	ld c,'4'
	jp bad
bad5:	ld c,'5'
	jp bad
bad9:	ld c,'9'
	    
bad:
	call CONOUT		; put out whatever was in reg C
        ld hl,failed
        call strout
spin:	jr spin

conout:     ; write character from C to console
	in a,(TxStat)		; transmit empty?
	and 1
	jp z,CONOUT
	ld a,c			; get char to accumulator
	out (TxData),a		; put it out to internal Z280 UART
	ret


seldsk:     ; select disk indicated by register C
       
            ld hl, 0    ; return code 0 indicates error
            ld a, c
            cp ndisks
            ret nc      ; return (with error code) if C >= ndisks ie illegal drive
            ld (diskno), a ; store current disk
            ld hl, dpbase0
            ret

home:       
	    ld bc, 0
            ; fall through into seltrk
seltrk:     ; set track given by register BC
;            ld a, c
            ld (track),bc
            ret

setsec:     ; set sector given by register BC
;            ld a, c
            ld (sector),bc
            ret

sectran:    ; logical to physical sector translation
            ; HL=BC ie 1:1 mapping (no translation)
            ld h, b
            ld l, c
            ret

devini:	    ; re-initialize device C, called on baud/mode change
            ; nothing to do for now
            ret

setdma:     ; set DMA address given by BC
	ld l,c
	ld h,b
            ld (dmaad), hl 
            ret
move:
; use ldir instruction to do block move
	ex de,hl		;xchg
	ldir
	ex de,hl		;xchg
	ret
	    

read:    
	push hl		;save reg
	push de
	push bc

	call READnew	; fetch new 512byte data from CF

; get the 512-byte data in the buffer to DMA address

	pop bc		; restore registers
	pop de
	pop hl
	ld a,0		; return good read status
	ret

READnew:
; read new CF sector into buffer
; save sector/track data into current CF sector/track
; reg B contains the 512-byte sector value
	ld a,0xe0		; set Logical Address addressing mode
	out (CF2427),a
	ld a,(sector)	;x since each track has 256 native sectors, don't need to do anything
	ld (CFLA07),a
	out (CF07),a	; write LSB CF LA address
	ld a,1		; read one sector
	out (CFsectcnt),a	; write to sector count with 1
	ld a,(track)	; get LSB track address
	ld (CFLA815),a	; update current CF track value, LSB
	out (CF815),a	; write to CF LA register
	ld a,(track+1)	; get MSB track address
	ld (CFLA1623),a	; update current CF track value, MSB
	out (CF1623),a	; write to CF LA register, MSB
	ld a,0x20		; read CF sector command
	out (CFstat),a	; issue the CF read sector comand
	in a,(CFstat)	; outjmp bug fix
	call readdrq	; check drq bit set before read CF data
	
	ld hl,(dmaad)	;y go straight from CF data reg to DMA address
	ld c,CFdata	; reg C points to CF data reg
	ld b,0		; sector has 256 16-bit data
	inir		;z80
	ld b,0		;z80
	inir		;z80
;z80	db 0xed,0x92	; op code for inirw input word and increment
;	inirw
;z80	in a,(CFstat)	;outjmp bug fix
	ret
readdrq:
	in a,(CFstat)	; check data request bit set before read CF data
	and 8		; bit 3 is DRQ, wait for it to set
	jp z,readdrq
	ret
;    

;---------------------------------------------------------------------------------------------------------------
; debug functions (ideally to be removed in final version, if we ever get that far!)
strout:     ; print string pointed to by HL
            ld a, (hl)
            cp 0
            ret z
            ld c, a
            call conout
            inc hl
            jr strout

failed: db " FAILED!!", 0
bootstr: db 13,10,"Boot LDRBIOS", 0
;---------------------------------------------------------------------------------------------------------------

; scratch RAM used by BIOS
track: 	ds 2
sector: ds 2
dmaad: 	ds 2
diskno: ds 1
CFLA07	ds 1		;CF LA address, LSB
CFLA815	ds 1
CFLA1623 ds 1		;CF LA address, MSB

dirb0:      ds 128           ; directory scratch area
data0:	    ds 128	     ; data scratch area
; double bit allocation
alv00:      ds 512            ; allocation vector for disk 0, must be (DSM/4)+2 bytes


	END